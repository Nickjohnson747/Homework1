Title         : Homework 1
Title note    : Due on September 21
Author        : Nick Johnson
Logo          : True

[TITLE]


# Induction on Integers
Prove that $ \forall n \in \mathbb{N} $
~ Equation
3 + 3^2 + \cdots + 3^n = \frac {3^{n+1} - 3} {2}
~
##Solution
###Base Case: Check formula works for $n = 1$
~ Equation
3^1 = \frac {3^{1+1}-3} {2} = \frac {9-3} {2} = 3
~
### Inductive Hypothesis: Assume formula works for $n = k$
~ Equation
3 + 3^2 + \cdots + 3^k = \frac {3^{k+1} - 3} {2}
~
### Inductive Step: Try formula with $n = k+1$
~ Equation
3 + 3^2 + \cdots + 3^k + 3^{k+1}= \frac {3^{k+1} - 3} {2} 
~
~ Equation
<!-- begin merge (remove this line to resolve the conflict) -->
~ Begin Remote
(\frac {3^{k+1} - 3} {2}) + 3^{k+1} = (\frac {3^{k+2}-3} {2}) + 3^{k+1}
~ End Remote
(\frac {3^{k+1} - 3} {2}) + 3^{k+1} = (\frac {3^{k+2}-3} {2}) + 3^{K+1}
<!-- end merge -->
~
# Structural Induction
A set $S$ is defined as follows:\
(1)  $2\in S$\
(2)  if $x,y\in S$, then $2(x+y)\in S$.\
(3)  if $x,y\in S$, then $xy \in S$.\
Prove that if $x\in S$ and $x\not=2$, then $x$ is divisible by 4.

##Solution
###Base Case ($n = 2$)


# $\lambda$-Calculus
Reduce the following $\lambda$-terms to their normal form:\
(1) $(\lambda a b c . c b a)zz(\lambda x y . x) \rightarrow_\beta (\lambda b c . (b c (\lambda x y . x))zz
\rightarrow_\beta $

(2) $(\lambda z . z)(\lambda z . z z)(\lambda z . z y) \rightarrow_\alpha 
 (\lambda a . a)(\lambda b . b b)(\lambda z . z y) \rightarrow_\beta (\lambda z . z y)(\lambda b . bb)$



# Operator Precedence and Associativity
What does `3 @@ 5 @@ 7 + 1` evaluate to under the following three definitions? Explain.\
(1) 
~ Framed {padding:1ex 1ex; width:400px}
``` haskell
multThenInc :: Int -> Int -> Int
multThenInc x y = x * y + 1

infixl 3 @@
(@@) = multThenInc
```
~

(2) 
~ Framed {padding:1ex 1ex; width:400px}
``` haskell
multThenInc :: Int -> Int -> Int
multThenInc x y = x * y + 1

infixr 3 @@
(@@) = multThenInc
```
~

(3)
~ Framed {padding:"1ex 1ex"; width:400px}
``` haskell
multThenInc :: Int -> Int -> Int
multThenInc x y = x * y + 1

infixl 7 @@
(@@) = multThenInc
```
~

(4)
~ Framed {padding:"1ex 1ex"; width:400px}
``` haskell
multThenInc :: Int -> Int -> Int
multThenInc x y = x * y + 1

infixr 7 @@
(@@) = multThenInc
```
~

(5)
~ Framed {padding:"1ex 1ex"; width:400px}
``` haskell
multThenInc :: Int -> Int -> Int
multThenInc x y = x * y + 1

infix 5 @@
(@@) = multThenInc
```
~
##Solution 
### (1)
```haskell
  3 @@ 5 @@ 7 + 1 = ((3*5) + 1) @@ 8 = 16 @@ 8 = 128
```
### (2)
```haskell
  3 @@ 5 @@ 7 + 1 = 3 @@ ((5*8) + 1) = 3 @@ 41 = 123
```
### (3)
```haskell
  3 @@ 5 @@ 7 + 1 = ((3*5)+1) @@ 7 + 1 = 16 @@ 7 + 1 = 114 
```

### (4)
```haskell
  3 @@ 5 @@ 7 + 1 = 3 @@ ((5*7) + 1) + 1 = 3 @@ 36 + 1 = 110
```
### (5)
```haskell
  Error
```
\
\
\



[reference manual]: http://research.microsoft.com/en-us/um/people/daan/madoko/doc/reference.html  "Madoko reference manual"
